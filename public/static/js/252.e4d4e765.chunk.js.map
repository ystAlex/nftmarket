{"version":3,"file":"static/js/252.e4d4e765.chunk.js","mappings":"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","sources":["../node_modules/viem/node_modules/@noble/hashes/src/hmac.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/viem/node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/viem/node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/viem/node_modules/@noble/curves/src/secp256k1.ts"],"sourcesContent":["import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean')\n    throw new Error(`${title} must be valid boolean, got \"${value}\".`);\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint) {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint) {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error(`expected valid ${title}: ${min} <= n < ${max}, got ${typeof n} ${n}`);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean) {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(fn: (arg: T, ...args: O) => R) {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\nexport function FpLegendre(order: bigint) {\n  // (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n  // (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n  return <T>(f: IField<T>, x: T): T => f.pow(x, legendreConst);\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendre = FpLegendre(f.ORDER);\n  return (x: T): boolean => {\n    const p = legendre(f, x);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * NOTE: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject, bitLen } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>(); // This allows use make points immutable (nothing changes inside)\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const validateW = (W: number) => {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n      throw new Error(`Wrong window size=${W}, should be [1..${bits}]`);\n  };\n  const opts = (W: number) => {\n    validateW(W);\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      const W: number = pointWindowSizes.get(P) || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) pointPrecomputes.set(P, transform(comp));\n      }\n      return this.wNAF(W, comp, n);\n    },\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM).\n * MSM is basically (Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param field field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  field: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  if (!Array.isArray(points) || !Array.isArray(scalars) || scalars.length !== points.length)\n    throw new Error('arrays of points and scalars must have equal length');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error(`wrong scalar at index ${i}`);\n  });\n  points.forEach((p, i) => {\n    if (!(p instanceof (c as any))) throw new Error(`wrong point at index ${i}`);\n  });\n  const wbits = bitLen(BigInt(points.length));\n  const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n  const MASK = (1 << windowSize) - 1;\n  const buckets = new Array(MASK + 1).fill(c.ZERO); // +1 for zero array\n  const lastBits = Math.floor((field.BITS - 1) / windowSize) * windowSize;\n  let sum = c.ZERO;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(c.ZERO);\n    for (let j = 0; j < scalars.length; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = c.ZERO; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = c.ZERO; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport {\n  AffinePoint,\n  BasicCurve,\n  Group,\n  GroupConstructor,\n  validateBasic,\n  wNAF,\n  pippenger,\n} from './curve.js';\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes, memoized, abool } from './utils.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\n\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = ut.numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      return `${ut.numberToHexUnpadded(tag)}${lenLen}${len}${data}`;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint) {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = ut.numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected assertion');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('Invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('Invalid signature integer: unnecessary leading zero');\n      return b2n(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('Invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const seq = `${tlv.encode(0x02, int.encode(sig.r))}${tlv.encode(0x02, int.encode(sig.s))}`;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = mod.Field(CURVE.n, CURVE.nBitLength);\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return ut.inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, N); // disabled by default, enabled for BLS\n    ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (x, y, z) ∋ (x=x/z, y=y/z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      Object.freeze(this);\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]) {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      ut.aInRange('scalar', sc, _0n, CURVE.n);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (sc === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, sc);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', scalar, _1n, N);\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      abool('isCompressed', isCompressed);\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!ut.inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n      ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    ut.aInRange(`num < 2^${CURVE.nBitLength}`, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    validateSigVerOpts(opts);\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { CHash } from './abstract/utils.js';\nimport { CurveType, weierstrass } from './abstract/weierstrass.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport {\n  inRange,\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  numberToBytesBE,\n} from './abstract/utils.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n */\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1P)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1N)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Schnorr signatures over secp256k1.\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n"],"names":["HMAC","Hash","constructor","hash","_key","super","finished","destroyed","assertHash","key","toBytes","this","iHash","create","update","Error","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","fill","buf","assertExists","digestInto","out","assertBytes","destroy","_cloneInto","to","Object","getPrototypeOf","hmac","message","_0n","BigInt","_1n","_2n","isBytes","a","name","abytes","item","abool","title","value","hexes","Array","from","_","toString","padStart","bytesToHex","bytes","hex","numberToHexUnpadded","num","hexToNumber","asciis","_0","_9","_A","_F","_a","_f","asciiToBase16","char","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","n2","undefined","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","n","len","numberToBytesLE","ensureBytes","expectedLength","res","e","concatBytes","sum","arguments","isPosBig","inRange","min","max","aInRange","bitLen","bitMask","u8n","data","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","h","_len","b","reseed","seed","gen","sl","slice","push","genUntil","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isSafeInteger","Number","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","entries","memoized","fn","map","WeakMap","arg","get","_len2","args","_key2","computed","_3n","_4n","_5n","_8n","mod","result","pow","power","modulo","pow2","x","invert","number","y","u","q","r","m","FpSqrt","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","Math","ceil","Field","ORDER","isLE","redef","BITS","BYTES","sqrtP","f","freeze","MASK","is0","isOdd","lhs","rhs","add","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","lst","nums","tmp","lastMultiplied","reduce","acc","inverted","reduceRight","FpInvertBatch","cmov","c","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","pointPrecomputes","pointWindowSizes","validateBasic","curve","Gx","Gy","validateSigVerOpts","opts","lowS","prehash","b2n","h2b","ut","DER","Err","_tlv","encode","tag","E","dataLen","lenLen","decode","pos","first","lengthBytes","subarray","l","_int","parseInt","toSig","int","tlv","seqBytes","seqLeftBytes","rBytes","rLeftBytes","sBytes","sLeftBytes","s","hexFromSig","sig","seq","weierstrassPoints","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","Fn","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","normPrivateKeyToScalar","lengths","N","includes","error","assertPrjPoint","other","Point","toAffineMemo","iz","px","py","pz","z","ax","ay","zz","assertValidMemo","left","right","fromAffine","normalizeZ","points","toInv","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","msm","scalars","forEach","wbits","windowSize","buckets","lastBits","floor","j","scalar","resI","sumI","double","pippenger","_setWindowSize","wnaf","setWindowSize","hasEvenY","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wNAFCached","multiplyUnsafe","sc","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","G","cofactor","toRawBytes","isCompressed","toHex","_bits","bits","condition","validateW","W","windows","elm","precomputeWindow","base","window","precomputes","mask","maxNumber","shiftBy","offset","offset1","offset2","abs","cond1","cond2","transform","comp","delete","ProjectivePoint","isWithinCurveOrder","weierstrass","curveDef","randomBytes","bits2int","bits2int_modN","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","y2","sqrtError","suffix","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","precompute","isProbPub","str","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","C","drbg","verify","signature","publicKey","sg","_sig","derError","is","getHash","msgs","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2","sha256"],"sourceRoot":""}